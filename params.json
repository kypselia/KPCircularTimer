{"name":"KPCircularTimer","tagline":"IBDesignable component that creates a circular timer for iOS","body":"# KPCircularTimer\r\n\r\nKPCircularTimer is an IBDesignable component that creates a custom circular timer, showing the percentage completed since start.\r\n\r\n## Installation\r\n\r\nDrop the files `KPCircularTimer.h` and `KPCircularTimer.m` into your Xcode project.\r\n\r\n## Usage\r\n\r\nIn your Storyboard, add a UIView to your scene, set its class to KPCircularTimer and configure its properties in the Attributes pane. You will in particular want to configure the background and foreground colors for your timer view to be visible. \r\n\r\nIn your View Controller class, set the `timeToRun` property to the duration of the timer, then call the `start` method to start the timer. You may also configure block callbacks to be executed at the start and end of the timer. \r\n\r\n## Methods\r\n\r\nCreate a timer using:\r\n\r\n```\r\n- (id)initWithTimeInterval:(NSTimeInterval)timeToRun \r\n                  position:(CGPoint)position \r\n                    radius:(CGFloat)radius \r\n               strokeWidth:(CGFloat)strokeWidth \r\n     backgroundStrokeColor:(UIColor *)backgroundStrokeColor \r\n     foregroundStrokeColor:(UIColor *)foregroundStrokeColor \r\n             startCallback:(void (^)(void))startBlock \r\n               endCallback:(void (^)(void))endBlock;\r\n```\r\n\r\n```\r\n- (void)start;\r\n```\r\nStarts the timer.\r\n\r\n```\r\n- (void)stop;\r\n```\r\nStops the timer.\r\n\r\n```\r\n- (void)pause;\r\n```\r\nPauses the timer.\r\n\r\n```\r\n- (void)resume;\r\n```\r\nResumes the timer.\r\n\r\n```\r\n- (BOOL)isRunning;\r\n```\r\nIndicates if the timer is currently running.\r\n\r\n```\r\n- (NSTimeInterval)elapsedTime;\r\n```\r\nReturns the interval of time elapsed since the timer started running.\r\n\r\n\r\n## Demo\r\n\r\nYou can find a demo project in the github repository. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}